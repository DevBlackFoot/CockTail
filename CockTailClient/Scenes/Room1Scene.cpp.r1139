#include "pch.h"
#include "Room1Scene.h"
#include "PlayerRellyPointTrigger.h"
#include "EnemySpawner.h"

#include "Component/Camera.h"
#include "Component/BasicCameraController.h"
#include "Component/BoxCollider.h"
#include "Component/SphereCollider.h"
#include "Component/CapsuleCollider.h"
#include "Component/PosColorRenderer.h"
#include "Component/MeshRenderer.h"
#include "Component/Light.h"
#include "Component/SpriteEffect.h"
#include "CameraController.h"
#include "Component/Particle.h"

#include "Scripts/MoveController.h"
#include "Scripts/PlayerController.h"
#include "PlayerAttackController.h"

//#include "EnemyController.h"
#include "MeleeDogController.h"
#include "ArchorDogController.h"
#include "EnemyNavAgent.h"
#include "EnemyHitTrigger.h"
#include "NextSceneTrigger.h"
#include "Room1Door.h"
#include "GameManagerObject.h"
#include "ToadController.h"

#include "test.h"

//UI
#include "InGameUIController.h"
#include "SettingUIController.h"

namespace ClientSpace
{
	Room1Scene::Room1Scene(tstring sceneName)
		: SceneBase(sceneName)
	{
	}

	Room1Scene::~Room1Scene()
	{
	}

	void Room1Scene::BuildScene()
	{
		// 각종 오브젝트들 생성
		SceneManager::GetInstance()->LoadSceneData("Room1Scene");

		// NavMesh 생성 
		NavigationManager::GetInstance()->MakeNavMesh("Room1NavMesh");

		SetScene();

		auto rellyPoint = SceneManager::GetInstance()->FindObjectName(L"RellyPoint");
		rellyPoint->AddComponent<PlayerRellyPointTrigger>();

		// player 생성
		std::shared_ptr<GameObject> player = CreateEmpty();
		player->AddComponent<PlayerController>();
		player->GetComponent<Transform>()->SetPosition(playerEntryPos);
		player->GetComponent<Transform>()->SetLocalEulerRotation(playerEntryRot);	
		Vector3 target = rellyPoint->GetComponent<Transform>()->GetWorldPosition();
		player->AddComponent<PlayerController>()->SetTarget(target);
		player->AddComponent<PlayerAttackController>();

		// dogani로 잘바꿀것~~~~~~~~~~~~~~~~~~~~
		ObjectPool::GetInstance()->RegisterGameObject("archor", 2, [&]()
		{
			std::shared_ptr<GameObject> archor = CreateEmpty();
			archor->AddComponent<MeshRenderer>()->LoadPrefab("dogani_throw.model");
			archor->AddComponent<ArchorDogController>();
			archor->SetGameObjectEnable(false);
			return archor;
		});

		ObjectPool::GetInstance()->RegisterGameObject("melee", 3, [&]()
			{
				std::shared_ptr<GameObject> melee = CreateEmpty();
				melee->AddComponent<MeshRenderer>()->LoadPrefab("dogani.model");
				melee->GetComponent<MeshRenderer>()->SetLoad();
				melee->AddComponent<MeleeDogController>();
				melee->SetGameObjectEnable(false);
				return melee;
			});

		auto button = SceneManager::GetInstance()->FindObjectName(L"ElevatorButton");
		std::shared_ptr<GameObject> melee = CreateEmpty();
		melee->AddComponent<MeshRenderer>()->LoadPrefab("dogani.model");
		melee->AddComponent<MeleeDogController>();
		auto _target = button->GetComponent<Transform>()->GetWorldPosition();
		_target.y += 3.0f;
		melee->GetComponent<Transform>()->SetPosition(_target);

		melee->SetName(L"1Dog");

		std::shared_ptr<GameObject> melee2 = CreateEmpty();
		melee2->AddComponent<MeshRenderer>()->LoadPrefab("dogani.model");
		melee2->AddComponent<MeleeDogController>();
		_target.x -= 5.0f;
		melee2->GetComponent<Transform>()->SetPosition(_target);

		melee2->SetName(L"2Dog");

		auto scene = SceneManager::GetInstance();

		for (int i = 1; i <= 10; i++)
		{
			auto m = scene->FindObjectName(L"Melee " + to_wstring(i));
			m->AddComponent<MeshRenderer>()->LoadPrefab("dogani.model");
			m->AddComponent<MeleeDogController>();
		}

		for (int i = 1; i <= 1; i++)
		{
			auto m = scene->FindObjectName(L"Toad " + to_wstring(i));
			m->AddComponent<MeshRenderer>()->LoadPrefab("toadani.model");
			m->AddComponent<ToadController>();
		}

		/*for (int i = 1; i <= 2; i++)
		{
			auto a = scene->FindObjectName(L"Arc " + to_wstring(i));
			a->AddComponent<MeshRenderer>()->LoadPrefab("dogani_throw.model");
			a->AddComponent<ArchorDogController>();
		}*/

		// DirectionalLight Test
		/*std::shared_ptr<GameObject> directionalLight = CreateEmpty();
		directionalLight->AddComponent<Light>();
		directionalLight->GetComponent<Light>()->ChangeType(LightType::Directional);
		directionalLight->GetComponent<Light>()->SetColor(SimpleMath::Vector3{ Colors::White });
		directionalLight->GetComponent<Light>()->SetDirection(SimpleMath::Vector3{ 0.5f, -0.5f, 0.5f });
		directionalLight->GetComponent<Light>()->SetPower(1.0f);*/


	/*	std::shared_ptr<GameObject> dummy = CreateEmpty();
		dummy->AddComponent<MeshRenderer>()->Init("dog.model");
		dummy->GetComponent<Transform>()->SetPosition({ 20.f, 5.f, -45.f });
		dummy->AddComponent<EnemyController>();*/

	/*	std::shared_ptr<GameObject> testmob = CreateEmpty();
		testmob->AddComponent<MeshRenderer>()->Init("red.model");
		testmob->GetComponent<Transform>()->SetPosition({ 20.f, 5.f, -50.f });
		testmob->AddComponent<EnemyController>();*/

		//std::shared_ptr<GameObject> red = CreateEmpty();
		//red->AddComponent<MeshRenderer>()->Init("red.model");
		//red->GetComponent<Transform>()->SetPosition({ 30.f, 5.f, -35.f });
		//red->AddComponent<NavMeshAgent>();
		//red->AddComponent<Rigidbody>();
		//red->AddComponent<CapsuleCollider>();
		//red->GetComponent<CapsuleCollider>()->SetCenter({ 0.f, 1.0f, 0.f });
		//red->GetComponent<CapsuleCollider>()->InitRenderObj();
		//red->GetComponent<Rigidbody>()->InitRigidBody();
		//red->GetComponent<Rigidbody>()->SetPhysAxisLock(false, false, false, true, true, true);
		//red->AddComponent<MoveController>();
		//red->GetComponent<MoveController>()->SetTarget(player->GetComponent<Transform>());

		/*std::shared_ptr<GameObject> axis = CreateEmpty();
		axis->AddComponent<PosColorRenderer>()->Init("Axis");*/
		SceneManager::GetInstance()->GetCurrentScene()->GetMainCamera()->GetGameObject()->AddComponent<CameraController>();

		// 테스트용 파티클 생성
		/*
		std::shared_ptr<GameObject> testParticle = CreateEmpty();
		testParticle->AddComponent<Particle>()->Init("Hit");
		testParticle->GetComponent<Transform>()->SetPosition(playerEntryPos);
		testParticle->GetComponent<Transform>()->SetScale({0.5f, 0.5f, 0.5f});

		*/
		
		auto inGameUIController = CreateUI();

		player->GetComponent<PlayerController>()->SetInGameUIController(inGameUIController->GetComponent<InGameUIController>());
	}

	std::shared_ptr<GameObject> Room1Scene::CreateUI()
	{
		std::shared_ptr<GameObject> ui = CreateEmpty();
		ui->AddComponent<InGameUIController>();
		return ui;
	}

	void Room1Scene::SetScene()
	{
		auto scene = SceneManager::GetInstance();

		auto entryPoint = scene->FindObjectName(L"EntryPoint");
		auto elevator = scene->FindObjectName(L"Elevator");
		auto leftPortal = scene->FindObjectName(L"LeftPortal");
		auto button = scene->FindObjectName(L"ElevatorButton");

		enemySpawn = scene->FindObjectName(L"EnemySpawn");

		playerEntryPos = entryPoint->GetComponent<Transform>()->GetWorldPosition();
		playerEntryRot = entryPoint->GetComponent<Transform>()->GetLocalEulerRotation();

		elevator->AddComponent<NextSceneTrigger>()->SetNextScene(L"Elevator2Scene");
		leftPortal->AddComponent<NextSceneTrigger>()->SetNextScene(L"LeftPassage1Scene");
		leftPortal->GetComponent<NextSceneTrigger>()->SetKillCount(0);

		button->AddComponent<Room1Door>();

		enemySpawn->AddComponent<EnemySpawner>();

		auto toad = CreateEmpty();
		auto _pos = entryPoint->GetComponent<Transform>()->GetWorldPosition();
		_pos.z += 3.0f;
		_pos.x += 3.0f;
		toad->GetComponent<Transform>()->SetPosition(_pos);
		auto _rot = PhysicsManager::GetInstance()->EulerToQuat({ 0.0f,180.0f,0.0f });
		toad->GetComponent<Transform>()->SetRotation(_rot);
		toad->AddComponent<MeshRenderer>()->LoadPrefab("toadani.model");
	}
}